// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220910114820_alter-column_name_CreatedAt_tables_all")]
    partial class altercolumn_name_CreatedAt_tables_all
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBalances");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 4,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 10,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "205f112b-447d-412a-82a4-0a83ccd285b5",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyStamp = "5c22ebfb-ddf4-4bb0-a8f2-0ddc952e9594",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b90c4ffa-381f-4f21-9331-5539d0b9adf9",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBR/1shOo/nkUtRyMuExBS1TdU2HmTv9FB1MFXds7bbP4xlQjA5slNVYgTfan77WRQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c849343-d011-4707-93b8-490f14296f10",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a63bc00-d445-4daa-9dd6-a1c1354ed89e",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEPG485VBHZisdDQxQAzPcRD3f/kQqvuvJDrZc8ZA92ZzMJKu/xIWVYlxfgVzMVM7NA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f030f409-ffdb-4394-80f8-acf57373327f",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "788101fc-c4af-4425-8b92-503ceb2afe7f",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@YANDEX.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMpZ/SwcieJ8jTVaB9H1rmfbs2p7hxuvRs4Hyv/ypFUA3LeL1tYdazjxCn+Tv8r2hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "907af006-32a7-4f84-a704-fd4961b2ae9c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Sunt enim facere et a inventore et dicta sed voluptate. Natus repellat aut beatae necessitatibus laboriosam temporibus repudiandae ea. Explicabo in enim quisquam blanditiis ea quia.\n\nEt impedit accusantium at culpa ut non et. Inventore quia maiores quia tempora provident accusantium est eum. Aliquid voluptates eos.\n\nPerspiciatis consectetur sit tempore tenetur placeat illo. Maxime rerum quos perspiciatis ipsa dicta veritatis doloribus. Iste et sed sint consectetur molestias sint ab quam et. Ut hic quia est expedita.\n\nRerum iusto asperiores fugiat veritatis. Soluta dolorem exercitationem deleniti et nesciunt et sunt id. Error quibusdam quasi est repellendus expedita libero nobis molestiae pariatur. Ipsam eaque aut sed corrupti. Atque consectetur ut dignissimos error. Nemo sit dicta iusto ut corrupti.\n\nDolor fugit ut dolor architecto est. Repellendus consequatur et rem velit itaque. Perspiciatis magni id commodi voluptatem.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Et mollitia sit ea iure voluptas provident quia et. Voluptatem rem quae id dolor ipsum nulla et debitis qui. Nulla repudiandae sed odio quasi dolor accusamus illo est odit. Quia est incidunt eveniet. Quis ut ullam odit.\n\nIusto ratione asperiores iste rerum provident temporibus aut beatae et. Qui laborum voluptatem quia ut et et rerum omnis. Error laborum et id laboriosam voluptatem.\n\nSed laboriosam officiis sed dolores. Optio magni culpa. Dolor provident modi vel ducimus est.\n\nDignissimos similique explicabo enim quia qui. Et rerum aut vel accusantium. Nemo ut voluptatem eaque perferendis ut repellendus quasi amet ab. Non id omnis totam. Inventore soluta eligendi.\n\nNulla corrupti saepe sequi repudiandae ullam repellat architecto. Qui odit est et qui deserunt necessitatibus eum in. A rem veniam iusto. Rem et aliquam officiis. Consectetur quaerat fugit.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Sequi dolorum sunt nisi. Dolorem velit hic et ut ipsam aut aut enim. Et earum nam. Quod aut voluptatem laborum quia incidunt excepturi veritatis autem saepe. Omnis molestias rem eaque repudiandae minima et.\n\nEt enim explicabo natus molestias quam. Ratione aut autem voluptate fugit. At amet id sed.\n\nAut nisi rerum sapiente ut ipsum pariatur repellat nihil. Est itaque suscipit cupiditate beatae aut sunt. Velit earum qui autem porro soluta itaque magnam in illum. Aperiam atque consectetur fuga labore eligendi aut. Aperiam quia eius vitae corrupti minima. Consequatur rerum sapiente.\n\nDebitis vel ea cum quas. Quibusdam a hic recusandae. Occaecati ipsam iure sit animi praesentium beatae dolorem rerum earum.\n\nConsequatur ut est quibusdam omnis natus consectetur est nulla. Explicabo libero assumenda saepe. Laudantium totam qui occaecati voluptas. Corporis explicabo corrupti repudiandae recusandae ut nihil sint cumque quo.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Nulla in molestias voluptas sed a velit dolorem pariatur. Nemo molestiae praesentium quod ipsam minima ab. Doloremque ea dolor optio est quo. Beatae nostrum est assumenda ipsa atque facere deleniti voluptatem.\n\nNeque nihil iure eligendi et et officia ad voluptas voluptatem. Consequatur quis enim omnis voluptatem quia qui quos. Aut dolore recusandae eum officia veritatis culpa autem et vel. A quis modi sit fuga. Natus vel dolorum. Facilis ut iure laborum optio reprehenderit veritatis.\n\nAut non deserunt voluptatem repudiandae voluptatem illo quo sit. Enim perferendis illum. Tempora quidem amet. Placeat eius quidem doloremque aut. Voluptatem officiis fuga nulla praesentium.\n\nConsequatur cum eum eos. Possimus reprehenderit similique ut corrupti. Dolores ut inventore.\n\nConsequatur numquam neque aut minus iusto totam. Eius quisquam iure fuga id molestias. Repellendus pariatur et est earum sit voluptatibus.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Measure")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Model",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Socket",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Release year",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Total number of cores",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Maximum threads",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AMD Ryzen 5 3600 OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AMD Ryzen 5 3600 BOX",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AMD Ryzen 5 4650G OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AMD Ryzen 5 5600X OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "12",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Процессоры",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Материские платы",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Видеокарты",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseInvoices");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 2,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 7,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesReceipts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16497438198355340L),
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16368549622004121L),
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16604457698210827L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReceiptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReceiptId");

                    b.ToTable("SalesReceiptsWithProducts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductBalances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Purchases.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.SalesReceipts.SalesReceipt", "SalesReceipt")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("SalesReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReceipt");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesReceipts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductBalances");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesReceiptsWithProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Navigation("SalesReceiptsWithProducts");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
