// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220916105617_alter-table__tables=Products_SubCategories__add-column=ImgPath")]
    partial class altertable__tablesProducts_SubCategories__addcolumnImgPath
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBalances");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 4,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 10,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 3,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "7d245ddb-2020-44d5-a9b9-40e44955e258",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyStamp = "b26d7768-71ea-4e79-a66c-d1752962a63c",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "user",
                            NormalizedName = "USER",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39242ded-0d49-4049-bea5-54e0406dc827",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEHiLWC3SaGsVmICB0WU/A40ZSGvkstQhG8Wcja98Pz799AFtHcHhXayQR2cTu1L/zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de1abddd-7776-4e00-afb4-40dd0ab11bad",
                            TwoFactorEnabled = false,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserName = "user1",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e50e15b8-2d48-4a46-87d2-e3eda39bf947",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEOQrR1DJOXvv1s0sXOrarfJmRUIP2kMPbBDwbIaAXngjzGWDTMt6QVjoFvrzPlkUNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8368de91-621f-4940-ae7f-404c3da6a5a9",
                            TwoFactorEnabled = false,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserName = "user2",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48797ca3-942e-403a-a670-d26dfad8de6f",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@YANDEX.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAzFEReO3ut6E+33hllob0BFmFPXnILNOVveTo3Af0uXX7fC0kZUwuehLPjy96vCMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d4493504-5efc-4c71-a957-0244a86a9005",
                            TwoFactorEnabled = false,
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserName = "admin",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImgPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Qui quasi qui et quis maxime animi. Velit accusamus voluptatem sint fugit sunt. Totam est tenetur nobis a dolore consequatur quia consectetur. Soluta est qui.\n\nEt est natus nihil enim rerum. Nihil id commodi in quod similique tenetur doloremque. In et aut sit rerum aspernatur. Deleniti eveniet voluptas. Sit perspiciatis beatae.\n\nNam et et. Est qui ducimus aut aut reiciendis. Dicta cumque eligendi aliquid qui. Dolores ut id amet aut officiis rerum autem alias. Inventore saepe expedita nemo doloremque assumenda illum. Aut voluptas vero.\n\nPraesentium voluptatum et cum. Hic deserunt ut rerum optio beatae. Laborum sapiente quia ad iusto natus. Optio est inventore accusantium. Rem nihil ea doloribus eum. Debitis beatae error vitae dignissimos cupiditate magnam.\n\nConsequatur aliquid adipisci. Optio saepe magni fugiat soluta neque. Esse iure voluptatem velit. Non aliquam qui quasi nihil vitae nesciunt laboriosam consequatur. Totam occaecati illum est tenetur rerum. Tempora a ipsam.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Maxime ipsa excepturi voluptatem ducimus deserunt. Hic doloremque qui dolores corrupti. Aut eveniet sapiente provident pariatur nihil eum. Consequuntur quos quo ut. Dolore ab sint possimus maxime distinctio et impedit.\n\nFuga ea est expedita. Dolorem quod tempora repellendus et similique. Quasi quidem est voluptas officia est. Quaerat veniam nihil ut tempora tenetur incidunt vero atque.\n\nSit rem error nemo doloribus eaque molestiae in maxime. Quisquam vel qui omnis assumenda aspernatur voluptas et reiciendis ut. Quo rerum nam non ullam eius eius. Corporis exercitationem vitae.\n\nModi corrupti et eaque amet explicabo. Velit aut animi quaerat dolorum minus nobis. Qui neque nemo architecto molestiae error et minima.\n\nConsectetur autem eum molestiae enim tempore qui minus. Tempore eligendi libero rerum unde modi consectetur. Id doloribus eligendi.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Possimus quia voluptatem porro dolorum impedit et illo. Nesciunt facere odit odit alias. Est esse labore. Ullam error rerum aut.\n\nPlaceat ipsam consequuntur maxime consectetur officiis dolor esse magni. Et et et libero reiciendis dolor quaerat. Cumque aliquam soluta doloremque. Est sed molestiae. Cum voluptatem eius accusantium. Non perspiciatis saepe sunt suscipit enim.\n\nIpsa reprehenderit dolores rem tempore modi commodi optio amet. Illum quia voluptatem quod id corporis qui qui qui. Et odit doloremque illum.\n\nConsequatur explicabo aliquam error quasi sit. Ab dolor vero nobis cumque rem quia optio. Aut sequi aliquam. Rem voluptate repellendus voluptates eius qui quis. Perspiciatis qui in officia incidunt quo sit magnam. Porro vel qui tempora dolores et corrupti.\n\nNisi cupiditate hic qui aut. Consequatur sunt et sit mollitia dolorem sapiente. Dignissimos recusandae quod facere aut. Optio quia enim aut illo iste. In officia excepturi omnis repellendus. Qui dolor est repudiandae.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Nemo expedita et esse quam distinctio. Eaque maxime expedita officiis non aliquid. Et aut dolorem. Est inventore tempore voluptatem et.\n\nEarum aut fugit aperiam aspernatur. Et autem non necessitatibus porro ut est vel reprehenderit facere. Et consequatur est quis qui id. Tempora excepturi ex expedita. Est ducimus et.\n\nNecessitatibus maxime qui distinctio consequuntur rerum eum officiis. Quia expedita temporibus animi. Autem laborum aut sit similique eos quis repudiandae ex qui. Dignissimos qui ut sunt harum corporis earum aut dignissimos.\n\nIste non voluptates voluptatem. Sit voluptas perferendis omnis. Facilis consequatur sequi. Eos at laborum iste vel ut adipisci omnis incidunt consequatur.\n\nOdio unde id enim. Facilis quis in fugiat doloremque necessitatibus voluptate quia. Non id qui ut maiores est qui ratione numquam sunt.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            GroupId = "00000000-0000-0000-0000-000000000001",
                            Name = "Model",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            GroupId = "00000000-0000-0000-0000-000000000002",
                            Name = "Socket",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            GroupId = "00000000-0000-0000-0000-000000000001",
                            Name = "Release year",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            GroupId = "00000000-0000-0000-0000-000000000002",
                            Name = "Total number of cores",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            GroupId = "00000000-0000-0000-0000-000000000002",
                            Name = "Maximum threads",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductAttributeGroup");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Общие параметры",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Параметры процессора",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AMD Ryzen 5 3600 OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AMD Ryzen 5 3600 BOX",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AMD Ryzen 5 4650G OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AMD Ryzen 5 5600X OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Value = "12",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImgPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Процессоры",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Материские платы",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Видеокарты",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseInvoices");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 3,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 7,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesReceipts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16545679357050127L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16483917109944861L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16368783389766483L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReceiptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReceiptId");

                    b.ToTable("SalesReceiptsWithProducts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000003",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001",
                            UpdatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductBalances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttributeGroup", "Group")
                        .WithMany("ProductAttributes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Purchases.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.SalesReceipts.SalesReceipt", "SalesReceipt")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("SalesReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReceipt");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesReceipts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductBalances");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesReceiptsWithProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeGroup", b =>
                {
                    b.Navigation("ProductAttributes");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Navigation("SalesReceiptsWithProducts");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
