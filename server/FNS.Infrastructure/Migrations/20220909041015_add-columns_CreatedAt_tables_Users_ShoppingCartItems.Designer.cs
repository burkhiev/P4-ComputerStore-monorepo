// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220909041015_add-columns_CreatedAt_tables_Users_ShoppingCartItems")]
    partial class addcolumns_CreatedAt_tables_Users_ShoppingCartItems
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBalances");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 4,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 10,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d42216e-8355-4dae-819e-54686b2c4687",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEBr3B5LKeV80tzL2e01DoeUQ/OLGSD6wAmDoQrWnVo4r3SrF+F+U63mhnHMK0uF08Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7461a0b1-8f51-4481-a91e-25dfb20d4495",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eec0470d-a613-4dc5-8da7-10c9f6bc8751",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAELZGeomfgpGsi1se4SycfewlZhMWJLz/h8CD8RatlzNpepuSy5t65b2hYkUTaFW48w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "97108238-7021-475c-969c-70c2e5758279",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bac37403-0c22-4974-b62f-8e0f9bb3ac6a",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@YANDEX.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOd5KzJklxsR5VOvwHAfjIevqhFp+XdXbHjDqsL7IsHguTA2YUFyphFDEHHpnPEmSA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8a1ea8c3-f9d4-41df-915d-01b8cd3ee359",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Description = "Odio sed alias ea saepe neque. Qui quam ratione veritatis error ratione vel blanditiis. Tempore voluptatibus saepe hic inventore praesentium et. Velit voluptatem harum accusamus sit nihil omnis qui. Dignissimos minima et sed totam eveniet et similique blanditiis. Et ut excepturi et nam laudantium dignissimos.\n\nIllum doloremque nemo dolores ipsa dolor explicabo. Eveniet non voluptas eum nihil dolorum dolores soluta. Eum officia veniam ipsam.\n\nRecusandae laborum odit similique saepe. Et voluptatem incidunt. Occaecati voluptatem et non assumenda optio eos odio. Qui voluptate dolorum et quam non qui recusandae.\n\nOfficia nemo eaque. Est sit natus libero ex saepe cumque beatae velit. Consequatur voluptatibus itaque enim. Voluptatem repudiandae est.\n\nRepellat debitis a vitae labore magnam est accusamus et. Et voluptatem consequatur vel nostrum. Cumque dolorum dicta ea dolor.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Description = "Doloribus et laudantium. At voluptas necessitatibus corrupti rem incidunt ut provident. Placeat aliquam explicabo sapiente accusantium eum accusantium facilis. Voluptas numquam aliquid deleniti cumque adipisci iusto et.\n\nIllo et vel. Quod laudantium eius nesciunt nisi. Maxime incidunt quia facere nulla dolor rerum. Aut ratione ad rem praesentium et. Sed placeat ut recusandae vel officia est eum aut minus.\n\nNon earum iusto quia dolore. Veniam qui ut nesciunt molestiae est exercitationem natus. Natus tenetur officiis minus ullam.\n\nMaxime qui omnis aperiam nostrum at quibusdam. Quam non quia atque suscipit mollitia similique. Minima adipisci sequi rerum. Cum qui voluptatem incidunt accusamus repellendus aliquam et id nam. Repellat minus et. Recusandae ut ab qui nemo est quisquam.\n\nVero totam nihil. Amet nemo molestiae nisi quia qui sit est doloremque. Est modi suscipit perspiciatis aut. Officiis corrupti qui aut placeat dignissimos laudantium qui sequi nemo.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Description = "Necessitatibus qui similique ab. Est quod quas quia magni. Et et est repellendus. Eum eum veniam eos. At omnis est dignissimos.\n\nCorporis et molestiae beatae. Sit quisquam sint molestiae. Eos ut ea ut necessitatibus. Id sunt voluptatem deleniti blanditiis.\n\nDicta illum eius sint. Nam omnis sunt. Aut sequi ipsam quam illo similique unde expedita.\n\nPossimus laboriosam sint non veniam odio dolorem nisi. Tenetur consequuntur inventore distinctio. Facilis eum quibusdam eveniet consequatur non similique ut incidunt dolores.\n\nAut distinctio sed voluptatem et. Alias cupiditate in est soluta eum aut officia et magnam. Impedit earum sit ut quas asperiores quo.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Description = "Neque non vitae dolorum velit quos perspiciatis tempore et voluptates. Consectetur velit ratione consequatur repudiandae voluptatum. Eos aut aspernatur sunt. Aut atque minima eius rerum.\n\nSimilique fugit aut architecto omnis debitis quae. Eveniet et mollitia laboriosam ab repellat odit nihil quod. Culpa in quasi blanditiis voluptas explicabo eum quae sit. Nostrum praesentium unde nemo facere nihil dolores dolor.\n\nSapiente sint est maiores vel quas. Rem nulla consequatur ea doloribus delectus vel voluptatem sit cumque. Minima architecto aspernatur excepturi eos est quia.\n\nNam et architecto qui nulla eligendi sapiente voluptatem aliquid sit. Tenetur ratione nihil repellat modi et quas eligendi et vero. Sed est enim nihil. Cumque quas natus corporis qui architecto dolorem quibusdam sit provident.\n\nNesciunt ut architecto illum accusantium non officiis ut est eos. Molestiae reiciendis debitis architecto deleniti voluptatum quia praesentium perferendis. Exercitationem quos ab.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Measure")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            Name = "Model",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            Name = "Socket",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            Name = "Release year",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            Name = "Total number of cores",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            Name = "Maximum threads",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AMD Ryzen 5 3600 OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AMD Ryzen 5 3600 BOX",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AMD Ryzen 5 4650G OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AMD Ryzen 5 5600X OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "12",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Name = "Процессоры",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Name = "Материские платы",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Name = "Видеокарты",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseInvoice");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItem");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 2,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 7,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesReceipts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16559247002192406L),
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16521251684134143L),
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16469006891573696L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReceiptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReceiptId");

                    b.ToTable("SalesReceiptsWithProducts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "492068b0-6e09-4f5c-be6b-9765f7c8a669",
                            Name = "admin"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyStamp = "eef0e6cb-dbfd-4c55-9fe5-bea2d5a81496",
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductBalances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Purchases.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.SalesReceipts.SalesReceipt", "SalesReceipt")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("SalesReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReceipt");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesReceipts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductBalances");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesReceiptsWithProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Navigation("SalesReceiptsWithProducts");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
