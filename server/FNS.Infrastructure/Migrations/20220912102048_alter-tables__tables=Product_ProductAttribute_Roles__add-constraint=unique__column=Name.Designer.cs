// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220912102048_alter-tables__tables=Product_ProductAttribute_Roles__add-constraint=unique__column=Name")]
    partial class altertables__tablesProduct_ProductAttribute_Roles__addconstraintunique__columnName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBalances");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 4,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 10,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "6a269003-f65b-4d07-93a9-5c4776667d94",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyStamp = "81c81d73-ccab-4d49-9641-98a773269782",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6409408-1654-4ed3-a5cd-dfedf7c5ac2c",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEOyyWzhhNRVI6IuxKScFJ3KfcLWfNCeDGDlExBXQWqd/ijc5AvSSS7iAa7pYarp9dg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9891bccb-4f97-4c22-9477-bb52030682af",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93ba23ed-2468-4191-a3fe-778be918ef99",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEFqTMtl2Buab9OeyZ/R82Md4gGn5yZSwTom9+a3cQiKSB0NsAoO2gmN7YX5HAEvqzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7ea9a1e-0134-498b-8180-72ba02a2a7f3",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45e7fc40-21bf-4b04-8282-171aa0661fe1",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16626570600000000L),
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@YANDEX.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEABq8ljRBUeoOn5ltNVqs7hO/JZSEzQxBSKnPcRGZeFWo7dLr196YFANdFlEeDhjUw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb9d18a5-ebed-4464-8ef9-cc95194b3bab",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Aliquam voluptas eaque molestias modi debitis. Ut eaque autem dolorem odit autem quam. Saepe reprehenderit et. Repellat ipsa facilis voluptatem cum ex quis minus.\n\nMagni culpa suscipit. Nisi pariatur dolores error neque qui. In hic culpa. Voluptatem corrupti ad ex deserunt rerum ullam neque ea. Ipsam atque esse sit placeat velit. Voluptates excepturi at dolorum.\n\nRatione quis similique facere nobis quod ipsum eum nihil tempora. Consequuntur beatae voluptates rerum expedita aperiam aperiam. Suscipit nulla eius voluptatem deserunt omnis magni quia sit.\n\nVoluptas nam et et non. Placeat accusamus consequuntur et eveniet a repellendus. Iure voluptatem quod veniam possimus non.\n\nEt quia voluptatem fuga. Eveniet at optio at omnis labore quas ad rem aut. Aut debitis corporis dolorum quia sunt. Accusantium autem reprehenderit fugit. Numquam asperiores quaerat unde optio tempore saepe excepturi aliquam aut.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Minima magni numquam non odit in. Consectetur qui inventore doloribus quia cumque aut ipsa. Praesentium minima et quia. Sed recusandae quos vel voluptates. Laudantium delectus illum expedita quas corporis.\n\nMagni dolor ullam sequi. Non ut suscipit rem maxime voluptate ea ut vel maiores. Illum cumque delectus perferendis non ut aut.\n\nDoloribus accusantium quasi architecto. Veniam est ipsum optio expedita necessitatibus maxime pariatur numquam. Alias nisi quis corrupti et adipisci rerum cum expedita. Accusantium hic delectus optio tenetur nihil incidunt reiciendis quasi qui.\n\nCumque cupiditate molestiae omnis ut ut iure magnam. Similique non eius. Eum doloribus laudantium. Qui placeat voluptas incidunt aut inventore dolor omnis.\n\nNobis incidunt natus et dolores debitis odit quae et. Ea magni praesentium modi labore sit ad possimus. Molestiae repudiandae harum sit qui quo. Quo sequi asperiores ea ullam. Consectetur sunt accusantium dolorum aliquid et at illo qui.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Autem eveniet blanditiis rerum. Eum voluptatibus qui temporibus. Iure iusto in. Sunt provident magnam.\n\nVoluptates odit quia. Voluptate vel nesciunt magnam excepturi. Porro sit totam et autem ut itaque sint aspernatur.\n\nImpedit tenetur qui praesentium nostrum cupiditate qui est et ratione. Debitis quibusdam molestiae at voluptatem velit qui omnis. Id perspiciatis est repellat. Magnam vel qui possimus consequatur nemo dolores.\n\nArchitecto quaerat tenetur. Iste hic ab et eaque et. Dolor blanditiis modi voluptatibus.\n\nAut modi nam. Nisi earum provident eaque minima enim accusantium non fuga ab. Pariatur unde laborum necessitatibus qui aut. Est molestiae sint vitae nisi ut est qui. Quia eius perferendis deleniti. Ipsum laboriosam est neque.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Description = "Esse quia rerum necessitatibus optio rerum. Vel beatae aut eum et est nobis. Dolores ea reiciendis ut repudiandae.\n\nNihil earum consequatur aut rerum corporis nisi deleniti. Et ab est quia quisquam atque harum. Iure natus quo. Officia quod deleniti perferendis et commodi eum.\n\nEt optio officiis quia possimus. Dolores hic voluptatem excepturi sunt. Corporis in est corporis consectetur molestias et earum voluptate.\n\nDistinctio aliquam libero iste ut sequi excepturi perferendis aliquam ipsum. Consequatur voluptatem veniam corporis aut quo ullam enim. Et incidunt maxime et. Eaque omnis ab rerum exercitationem voluptatem voluptate dolores.\n\nRerum aut minima illum sequi corrupti quo fugiat. Tempora quia vel dolor ut sint voluptatem. Consequuntur aliquid autem. Dicta rerum ex. Voluptatibus sunt modi doloremque voluptatem odio non magni omnis.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Model",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Socket",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Release year",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Total number of cores",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Maximum threads",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AMD Ryzen 5 3600 OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AMD Ryzen 5 3600 BOX",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AMD Ryzen 5 4650G OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AMD Ryzen 5 5600X OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "12",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Процессоры",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Материские платы",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            Name = "Видеокарты",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseInvoices");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 2,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 7,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesReceipts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16377733999179049L),
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16503567552544784L),
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16569135710474366L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReceiptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReceiptId");

                    b.ToTable("SalesReceiptsWithProducts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductBalances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Purchases.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.SalesReceipts.SalesReceipt", "SalesReceipt")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("SalesReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReceipt");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesReceipts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductBalances");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesReceiptsWithProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Navigation("SalesReceiptsWithProducts");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
