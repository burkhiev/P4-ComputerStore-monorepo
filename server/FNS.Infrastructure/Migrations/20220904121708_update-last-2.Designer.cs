// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220904121708_update-last-2")]
    partial class updatelast2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBalances");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 4,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 10,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 3,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000004"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a52e8ea1-0fab-47de-a882-467129b3a363",
                            ConcurrencyToken = 0u,
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbafab93-7aab-4c3e-9eb1-abd7ff14f001",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c1c58f00-dd85-4944-9f32-ca068a3ca2e9",
                            ConcurrencyToken = 0u,
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46efbb9c-a2eb-40e3-9051-e1ed8f095fc9",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41a35d11-48a3-4f20-85d8-2b5077d46f30",
                            ConcurrencyToken = 0u,
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fca965cb-9ed9-471f-808e-a8583892d0a2",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            Description = "Rerum nihil asperiores blanditiis hic eos officiis suscipit officia provident. Nesciunt totam vero autem saepe harum voluptatem ut in. Sint incidunt et saepe est et nobis. Eius cupiditate eum at. Sit beatae velit dolorum soluta architecto.\n\nAut laudantium ut quia harum molestiae sapiente dolor. Ea nostrum et tempora velit sit in aperiam fuga. A numquam ea hic tempora nihil aut eaque culpa.\n\nQui vitae fuga enim vitae sunt. Ut minus eos voluptatibus eum. Quibusdam provident et. Ea nisi consequatur molestiae culpa alias.\n\nExpedita ut perspiciatis quo cum perspiciatis tempora quisquam quis. Hic qui commodi ad et autem. Dicta vero occaecati eos. Temporibus et corrupti nihil ipsam nisi. Et earum itaque eveniet et. Perferendis eveniet facere.\n\nAnimi molestias architecto illum modi cumque est. Consectetur hic voluptatem ipsa pariatur temporibus error odio sint adipisci. Hic vel voluptatem. Sit quia dignissimos et. Ducimus ea velit possimus ut rem earum.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            Description = "Similique exercitationem voluptas. Ut ut suscipit suscipit non. Facilis quo eveniet et tenetur earum aspernatur. Repellendus quis rerum.\n\nDeserunt culpa nulla libero harum error impedit accusantium id dolor. Dolorem placeat saepe corrupti eum ab. Ipsam mollitia repudiandae minus provident animi et voluptas sed.\n\nEt voluptatem voluptatem quia aut. Dolorem quas adipisci. Modi perspiciatis eos ut voluptatem nesciunt fugiat atque.\n\nEsse sit autem quis recusandae commodi ut porro. Aperiam earum numquam id qui inventore sed ad at. Vel enim nesciunt qui aut aliquid eum.\n\nTotam ut aspernatur voluptatum. Ut incidunt architecto consequatur aperiam. Non ducimus officia sapiente aut. Quia sit odit aut et autem. Repellat in odio enim qui est necessitatibus.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            Description = "Perspiciatis nisi nihil assumenda quo. Esse voluptatum aut. Sed magni architecto. Itaque perspiciatis voluptatem fugiat.\n\nPerferendis voluptatum animi est atque. Et aut officia quod. Libero et consequuntur facere quo deserunt. Dolores id repellat sunt provident delectus libero et ipsa est. Fugiat odit cumque qui unde consequatur aliquid optio repellat.\n\nNisi porro est atque sunt dicta. Quia et quis nemo fugiat vel laudantium ex neque. Facilis laboriosam numquam ea. Corporis molestiae cum neque aut omnis accusamus corporis laboriosam voluptas. Sunt culpa dolores atque earum. Eius sit natus sapiente qui.\n\nSimilique doloremque velit molestiae aut quo. Et consequatur autem sint ipsa suscipit incidunt porro. Id et veniam. Repudiandae voluptates et dolorum perspiciatis vel tempora id non.\n\nAsperiores quas numquam reiciendis quis. Doloremque tenetur amet nemo vel quo voluptatem sit voluptatem praesentium. Consectetur illo earum pariatur est ab aut.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ConcurrencyToken = 0u,
                            Description = "Est earum autem error cumque voluptas. Qui quam quia nam non autem dolores. Placeat quod voluptate porro placeat cumque suscipit aliquam sit eius. Porro cupiditate odio commodi ratione culpa provident.\n\nRem vel est sapiente. Consequatur quia sed atque enim. Cupiditate amet molestias.\n\nUt impedit et vero est alias libero ipsum fugiat id. Vel quo autem amet facere voluptates porro possimus. Qui cupiditate laudantium labore et ipsa quis nostrum cum explicabo. Cumque autem nihil natus vel sunt nesciunt qui. Quasi nam facere quidem rerum qui.\n\nDolorem aut est assumenda. Velit rerum rerum sit consequatur odio. Cupiditate tenetur at et expedita cupiditate quod voluptatem repellendus doloribus.\n\nVoluptatem inventore et atque et nam. Dolores magnam ut. Consequatur alias voluptates libero beatae adipisci. Incidunt voluptas id.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Measure")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            ConcurrencyToken = 0u,
                            Name = "Model"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            ConcurrencyToken = 0u,
                            Name = "Socket"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            ConcurrencyToken = 0u,
                            Name = "Release year"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            ConcurrencyToken = 0u,
                            Name = "Total number of cores"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            ConcurrencyToken = 0u,
                            Name = "Maximum threads"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AMD Ryzen 5 3600 OEM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "2019"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "12"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AMD Ryzen 5 3600 BOX"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "2019"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "12"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AMD Ryzen 5 4650G OEM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "2020"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "12"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AMD Ryzen 5 5600X OEM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "2020"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "12"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            Name = "Материские платы"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            Name = "Видеокарты"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseInvoice");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItem");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 2,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 3,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 7,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesReceipts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16307901439445135L),
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16434331166209636L),
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16404357750467261L),
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReceiptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReceiptId");

                    b.ToTable("SalesReceiptsWithProducts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductBalances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Purchases.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.SalesReceipts.SalesReceipt", "SalesReceipt")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("SalesReceiptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReceipt");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesReceipts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductBalances");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesReceiptsWithProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Navigation("SalesReceiptsWithProducts");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
