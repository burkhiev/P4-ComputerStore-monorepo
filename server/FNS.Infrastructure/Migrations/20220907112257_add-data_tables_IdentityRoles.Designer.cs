// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220907112257_add-data_tables_IdentityRoles")]
    partial class adddata_tables_IdentityRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductBalances");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 4,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 10,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f21e2784-4907-4118-854d-c970838d3c5a",
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.RU",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEJQLISaWKjmUMR0BdahCEc3q9/odmljTMUdlVhM3ooI6AW8rhGN8Ngv4wzHcsKMMrQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b54fcd3-b8e3-4079-b0cc-6cd8d19ad7da",
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ed69ec48-89e8-4c82-ab05-f8caf9140f22",
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.RU",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEAJvpljFvvzcrj4J1f3HDJUJ+y9EM8+jE5NYa3eYBkdv1pw9d7wEnnMPb7jFFyZF3A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66b4e980-0b2f-412c-bbf7-99392ceaa626",
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1db105f4-28e7-45a7-958a-f41c99989143",
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@YANDEX.RU",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBhg3j4Pxmh+9EV2Bg6MdqrsLcAjglh8S8pJcSG++zErO3gciC3BnyAkVyCoJm726Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c7487ab-7002-4c6b-aac9-10d86d02de2c",
                            TwoFactorEnabled = false,
                            UserName = "admin",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Description = "Architecto aliquid facere officiis excepturi facere dolorem error. Qui omnis totam ex dolorum voluptas sit. Id illo tempora.\n\nRepellendus placeat provident quo nobis facilis ratione. Accusantium quidem praesentium rerum est. Molestiae quasi dolor quibusdam accusamus et et. Blanditiis laborum labore quisquam molestiae blanditiis non accusantium. Ipsum hic tempore velit id laboriosam recusandae dolorum. Asperiores in quo sequi.\n\nQuibusdam adipisci delectus nisi. Ut enim culpa vel. Totam unde ipsum in in. Aut voluptatem ratione assumenda velit maiores qui id dolor. Ut id a voluptates et voluptatibus.\n\nPlaceat voluptates laboriosam dolorem. Molestiae ut blanditiis laudantium voluptatem omnis quod esse. Ut id quo et. Atque unde recusandae ea quos odio.\n\nEum quia totam possimus placeat amet deleniti. Rem ea molestiae. Consequatur quia quos ex rerum voluptatem occaecati. Dolorem corrupti iure deserunt fugit esse.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Description = "Iste illum est ad voluptas provident laboriosam. Vel omnis ut. Dolor ea suscipit repellat explicabo molestiae animi velit. Cupiditate aut sit quod dolorem debitis sed praesentium.\n\nEst eius rerum unde voluptatem magni dolore voluptate. Reiciendis fuga voluptatibus molestiae dolor quaerat. Illum aut qui nostrum autem culpa qui.\n\nError iusto nisi ut est ut rerum assumenda necessitatibus. Repellendus illum corrupti voluptatem et quia qui qui dolorem. Debitis consequatur amet vero quae voluptatem. Et repellendus nam et nemo incidunt.\n\nRerum velit qui consequatur et provident inventore. Omnis necessitatibus eligendi. Sint explicabo velit molestiae et quis.\n\nAssumenda quo iusto est corrupti et. Earum et adipisci quia molestiae provident facilis. Mollitia voluptatibus atque voluptatem adipisci quo sit. Placeat non nesciunt neque voluptatum. Mollitia harum reiciendis commodi at aut earum mollitia voluptatem.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Description = "Cum perspiciatis aperiam odit ut. Debitis et officia. Officia est id. Et atque quibusdam ratione assumenda ad est et hic ab. Et dolorem sit et similique. Voluptatem maxime consectetur quia occaecati dolores architecto voluptatem sit.\n\nVoluptatem tenetur aperiam ab. Numquam aut harum. Blanditiis nihil quis non atque nisi id. Deleniti aut ducimus rerum. Ut dolorem doloremque nihil sunt sed sint.\n\nDolorem quis harum cum incidunt vitae nesciunt. Esse optio praesentium aut voluptas modi iure sunt illum praesentium. At dignissimos sed consequuntur hic est libero dolor.\n\nMolestiae quidem nam. Doloremque et ut quos inventore nemo provident id. Adipisci temporibus eius tempora et nisi accusantium. Facilis ab aut perferendis doloribus sit.\n\nHarum ab nisi aliquid optio quia non asperiores iste. Accusamus est culpa. Dolorum perferendis officia et possimus aut ab autem placeat. Magni laudantium a ut animi quasi et modi.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Description = "Eos praesentium enim voluptates quas consequatur et non perferendis. Rerum et autem esse omnis. Molestias veniam vel fuga quos aut aut soluta. Eius placeat corporis laboriosam.\n\nEos totam maiores recusandae maiores voluptate expedita. Distinctio cupiditate quos quod qui cumque optio. Voluptatibus nostrum dolor id aut est rem. Consectetur nemo beatae consequatur dolores quis.\n\nLibero sit et tenetur fugiat vero earum. Et soluta rerum aut et voluptates veniam. Maiores illo voluptate et accusamus vero adipisci non sapiente velit. Officia quia non aperiam eligendi alias expedita minima.\n\nNostrum nihil non voluptas corporis vel soluta. Enim alias culpa qui. Quidem at cumque aliquid. Voluptatibus ut porro et. Iusto nisi nulla.\n\nOptio dolores qui sit error velit quam. Et molestiae similique odio necessitatibus est et non. Iste molestiae modi omnis in debitis blanditiis est deserunt. Et explicabo aliquam voluptatem dolores.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Measure")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            Name = "Model",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            Name = "Socket",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            Name = "Release year",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            Name = "Total number of cores",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            Name = "Maximum threads",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AMD Ryzen 5 3600 OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AMD Ryzen 5 3600 BOX",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "2019",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AMD Ryzen 5 4650G OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "12",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AMD Ryzen 5 5600X OEM",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AM4",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "2020",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "6",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "12",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Name = "Процессоры",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Name = "Материские платы",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Name = "Видеокарты",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseInvoice");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(0L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PurchaseInvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseInvoiceId");

                    b.ToTable("PurchaseInvoiceItem");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 2,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 3,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 7,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 5,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            PurchaseInvoiceId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Instant>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SalesReceipts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16370881734255612L),
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16566011763189938L),
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            CreatedAt = NodaTime.Instant.FromUnixTimeTicks(16418309308077856L),
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SalesReceiptId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesReceiptId");

                    b.ToTable("SalesReceiptsWithProducts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            SalesReceiptId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            UserId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            UserId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            UserId = "00000000-0000-0000-0000-000000000003",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002",
                            xmin = 0u
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abeb0007-caf8-47e7-91e2-52c1858c3256",
                            ConcurrencyStamp = "0262be59-f74b-4d03-b5aa-b0f5eb1c08da",
                            Name = "admin"
                        },
                        new
                        {
                            Id = "a7298e95-bc14-418f-8c6b-a457fd37bf8f",
                            ConcurrencyStamp = "a6707839-fcc4-45b5-8967-449c0d8d7906",
                            Name = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Balances.ProductBalance", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductBalances")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("PurchaseInvoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoiceItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Purchases.PurchaseInvoice", "PurchaseInvoice")
                        .WithMany("PurchaseInvoiceItems")
                        .HasForeignKey("PurchaseInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseInvoice");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithMany("SalesReceipts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceiptWithProduct", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.SalesReceipts.SalesReceipt", "SalesReceipt")
                        .WithMany("SalesReceiptsWithProducts")
                        .HasForeignKey("SalesReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesReceipt");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("PurchaseInvoices");

                    b.Navigation("SalesReceipts");

                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ProductBalances");

                    b.Navigation("PurchaseInvoiceItems");

                    b.Navigation("SalesReceiptsWithProducts");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.Purchases.PurchaseInvoice", b =>
                {
                    b.Navigation("PurchaseInvoiceItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.SalesReceipts.SalesReceipt", b =>
                {
                    b.Navigation("SalesReceiptsWithProducts");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
