// <auto-generated />
using System;
using FNS.Contexts.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FNS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220824042005_alter-table_ShoppingCartsWithProducts")]
    partial class altertable_ShoppingCartsWithProducts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e6ac16e7-b4e0-4ae8-9a38-2a1bfa8be723",
                            ConcurrencyToken = 0u,
                            Email = "user1@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "973bcd53-443b-43ea-a72d-bf638aae9214",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5088a58-e273-491e-a199-0df54c929b9a",
                            ConcurrencyToken = 0u,
                            Email = "user2@gmail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "576c82db-f1ad-4e71-948c-9f9e947cd2e7",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "58afb2cc-59b0-41c3-a794-3a1fce2bae5c",
                            ConcurrencyToken = 0u,
                            Email = "admin@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fbdf8731-d164-4bf0-96f0-0e0fdffa8b8d",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("SubCategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            Description = "Consequuntur maxime animi optio vel quo saepe aut molestias numquam. Distinctio temporibus provident dolorum ab autem non ut accusantium ut. Id perspiciatis enim commodi maiores animi ipsum aut iste. Officia praesentium natus animi nemo aut delectus vero. Amet modi sed.\n\nMaxime aut inventore. Quisquam non a. Ullam enim quia iure in illo maiores.\n\nQuia et dicta labore. At odio modi magnam. Quis magnam hic. Dolores sunt assumenda ut ad et laborum. Optio aut vitae aliquam impedit.\n\nFacere tenetur sed aperiam ea labore necessitatibus et. Voluptas beatae error sed similique. Fugit excepturi omnis. Aut aut autem.\n\nId unde voluptas nemo omnis atque molestiae voluptatem cupiditate. Aut earum et aspernatur et placeat laudantium animi. Est asperiores autem et rerum inventore asperiores dolorum quasi aliquam. Quas ut iure eaque cum id dolore magni. Impedit quasi qui quam eos et facilis beatae.",
                            Name = "AMD Ryzen 5 3600 OEM",
                            Price = 12599m,
                            ProductCode = "1372637",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            Description = "Possimus incidunt voluptas vitae culpa sunt adipisci accusamus facere. Omnis quidem quis libero. Sit nihil expedita tempore sunt rerum a quas doloribus at. Alias molestiae itaque non.\n\nFuga qui distinctio omnis facilis eos dolore occaecati impedit et. At voluptatem laboriosam officiis aut aut laborum officiis velit. Tenetur consequatur provident ab impedit vel voluptatibus quo voluptatem. Maiores iste incidunt error id qui est ut. Magnam consectetur earum quas commodi aut laborum sint.\n\nQui sunt adipisci. Debitis enim magni dolores autem et sed. Nulla eius et officia sed eos.\n\nAmet exercitationem et et. Voluptatem nisi quod. Fugiat aliquid ut unde. Laborum voluptas est ut eum. Quia iste sapiente qui. Ab dicta ut in vel qui quo.\n\nLaborum placeat est quo pariatur provident perspiciatis. Dolorem accusamus sapiente enim quia neque totam. Saepe quia recusandae sunt libero est earum non. Sint qui perspiciatis sequi aut unde est aperiam. Accusamus nostrum corrupti odio quod vero.",
                            Name = "AMD Ryzen 5 3600 BOX",
                            Price = 12899m,
                            ProductCode = "5059834",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            Description = "Quam eum atque. Nihil voluptatem excepturi voluptatem. Officiis et nemo sint earum dolores laborum in.\n\nDolorem et minima. Culpa veritatis et non. Corporis molestias eos.\n\nLabore quidem veritatis expedita enim ullam quia consequatur ea. Officiis et minus. Voluptatem similique ut eveniet. Sint nihil deserunt odio dignissimos.\n\nRecusandae quos tempore omnis repellendus reprehenderit. Quia autem cum ratione enim debitis quo. Possimus qui similique.\n\nEos nisi ratione facere consectetur libero. Quia molestiae reprehenderit natus voluptas aspernatur quia. Iure sunt quia et pariatur.",
                            Name = "AMD Ryzen 5 PRO 4650G OEM",
                            Price = 12599m,
                            ProductCode = "1689358",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ConcurrencyToken = 0u,
                            Description = "Nostrum qui consequatur. Illum molestiae cum facere molestias distinctio sed ea molestiae nulla. Velit eos ab fugit enim iure. Dolores ut tempora.\n\nQuos nihil pariatur. Excepturi iste ducimus ea quis error voluptate ullam. Inventore aut iusto sit sit perferendis nulla dolores ad.\n\nQuibusdam voluptatem autem quibusdam. Harum culpa nemo ipsa et libero. Nihil quisquam et suscipit assumenda. Perferendis quos sunt accusantium vel. Cupiditate voluptatem voluptatem dolores ab.\n\nNostrum qui unde impedit et quo et sint. Earum ex tenetur. Ipsum consectetur autem omnis dignissimos blanditiis nihil non labore dolorem. Sed dolorem aut esse enim voluptas voluptatibus laudantium.\n\nEnim qui dolor velit et distinctio. Aliquam quia id maiores. Repellendus officiis accusantium quos. Consequatur molestiae voluptas velit assumenda commodi quas.",
                            Name = "AMD Ryzen 5 5600X OEM",
                            Price = 16199m,
                            ProductCode = "4721161",
                            SubCategoryId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClrType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Measure")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ClrType = "String",
                            ConcurrencyToken = 0u,
                            Name = "Model"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ClrType = "String",
                            ConcurrencyToken = 0u,
                            Name = "Socket"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ClrType = "Int32",
                            ConcurrencyToken = 0u,
                            Name = "Release year"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ClrType = "Int32",
                            ConcurrencyToken = 0u,
                            Name = "Total number of cores"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ClrType = "String",
                            ConcurrencyToken = 0u,
                            Name = "Maximum threads"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductAttributeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AMD Ryzen 5 3600 OEM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "2019"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            Value = "12"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AMD Ryzen 5 3600 BOX"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "2019"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            Value = "12"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000011",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AMD Ryzen 5 4650G OEM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000012",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000013",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "2020"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000014",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000015",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            Value = "12"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000016",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000001",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AMD Ryzen 5 5600X OEM"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000017",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000002",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "AM4"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000018",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000003",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "2020"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000019",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000004",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "6"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000020",
                            ConcurrencyToken = 0u,
                            ProductAttributeId = "00000000-0000-0000-0000-000000000005",
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            Value = "12"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            Name = "Материские платы"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            Name = "Видеокарты"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            ConcurrencyToken = 0u,
                            UserId = "00000000-0000-0000-0000-000000000003"
                        });
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<uint>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShoppingCartId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("ShoppingCartItems");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000001",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Amount = 2,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000002",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000004",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            Amount = 1,
                            ConcurrencyToken = 0u,
                            ProductId = "00000000-0000-0000-0000-000000000003",
                            ShoppingCartId = "00000000-0000-0000-0000-000000000001"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttributeValue", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCartItem", b =>
                {
                    b.HasOne("FNS.Domain.Models.Products.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.ShoppingCarts.ShoppingCart", "ShoppingCart")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FNS.Domain.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Identity.User", b =>
                {
                    b.Navigation("ShoppingCart")
                        .IsRequired();
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.Product", b =>
                {
                    b.Navigation("ProductAttributeValues");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("FNS.Domain.Models.Products.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FNS.Domain.Models.ShoppingCarts.ShoppingCart", b =>
                {
                    b.Navigation("ShoppingCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
